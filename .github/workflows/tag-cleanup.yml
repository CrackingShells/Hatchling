name: Tag Cleanup

on:
  schedule:
    # Run weekly on Sundays at 2:00 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (show what would be deleted without actually deleting)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  PYTHON_VERSION: '3.12'

jobs:
  cleanup-tags:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Create tag cleanup script
      run: |
        cat > cleanup_tags.py << 'EOF'
        #!/usr/bin/env python3
        import subprocess
        import re
        import sys
        from datetime import datetime, timedelta
        from typing import List, Tuple

        def get_all_tags() -> List[Tuple[str, str]]:
            """Get all tags with their creation dates."""
            try:
                result = subprocess.run(
                    ['git', 'for-each-ref', '--format=%(refname:short)|%(creatordate:iso8601)', 'refs/tags'],
                    capture_output=True,
                    text=True,
                    check=True
                )
                tags = []
                for line in result.stdout.strip().split('\n'):
                    if '|' in line:
                        tag, date_str = line.split('|', 1)
                        tags.append((tag, date_str))
                return tags
            except subprocess.CalledProcessError:
                return []

        def is_build_tag(tag: str) -> bool:
            """Check if tag is a build tag (contains .b followed by number)."""
            return bool(re.search(r'\.b\d+$', tag))

        def is_dev_tag(tag: str) -> bool:
            """Check if tag is a dev tag (contains -dev)."""
            return '-dev' in tag

        def is_old_tag(date_str: str, days: int = 30) -> bool:
            """Check if tag is older than specified days."""
            try:
                tag_date = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
                cutoff_date = datetime.now().astimezone() - timedelta(days=days)
                return tag_date < cutoff_date
            except:
                return False

        def main():
            dry_run = sys.argv[1].lower() == 'true' if len(sys.argv) > 1 else True
            
            all_tags = get_all_tags()
            if not all_tags:
                print("No tags found.")
                return

            # Find tags to clean up
            tags_to_delete = []
            
            for tag, date_str in all_tags:
                should_delete = False
                reason = ""
                
                # Delete old build tags (older than 7 days)
                if is_build_tag(tag) and is_old_tag(date_str, 7):
                    should_delete = True
                    reason = "old build tag (>7 days)"
                
                # Delete old dev tags (older than 30 days)
                elif is_dev_tag(tag) and is_old_tag(date_str, 30):
                    should_delete = True
                    reason = "old dev tag (>30 days)"
                
                if should_delete:
                    tags_to_delete.append((tag, reason))

            if not tags_to_delete:
                print("No tags need cleanup.")
                return

            print(f"Found {len(tags_to_delete)} tags for cleanup:")
            for tag, reason in tags_to_delete:
                print(f"  - {tag} ({reason})")

            if dry_run:
                print("\nDry run mode - no tags were actually deleted.")
                return

            # Delete tags
            deleted_count = 0
            for tag, reason in tags_to_delete:
                try:
                    # Delete local tag
                    subprocess.run(['git', 'tag', '-d', tag], check=True, capture_output=True)
                    # Delete remote tag
                    subprocess.run(['git', 'push', 'origin', '--delete', tag], check=True, capture_output=True)
                    print(f"Deleted {tag} ({reason})")
                    deleted_count += 1
                except subprocess.CalledProcessError as e:
                    print(f"Failed to delete {tag}: {e}")

            print(f"\nDeleted {deleted_count} tags.")

        if __name__ == '__main__':
            main()
        EOF

    - name: Run tag cleanup
      run: |
        DRY_RUN="${{ github.event.inputs.dry_run || 'true' }}"
        python cleanup_tags.py "$DRY_RUN"

    - name: Summary
      run: |
        if [ "${{ github.event.inputs.dry_run || 'true' }}" = "true" ]; then
          echo "Tag cleanup completed in dry-run mode. No tags were actually deleted."
        else
          echo "Tag cleanup completed. Old build and dev tags have been removed."
        fi