name: Validate PR Branches to Main

on:
  pull_request:
    branches:
      - main

jobs:
  validate-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Validate PR source branch
        id: check-branch
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          AUTHOR="${{ github.event.pull_request.user.login }}"
          echo "Checking PR branch: $BRANCH_NAME"
          echo "PR author: $AUTHOR"
          if [[ "$BRANCH_NAME" =~ ^fix/ ]]; then
            echo "---"
            echo "‚úÖ Branch $BRANCH_NAME is allowed for PR to main (fix branch)."
            echo "branch_valid=fix" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            echo "---"
            echo "üîç Branch $BRANCH_NAME is a dev branch."
            echo "branch_valid=dev" >> $GITHUB_OUTPUT
          else
            echo "---"
            echo "‚ùå Error: Only 'fix/' or 'dev' branches can open PRs to 'main'."
            echo "branch_valid=invalid" >> $GITHUB_OUTPUT
          fi

      - name: Comment and fail if branch invalid
        if: ${{ steps.check-branch.outputs.branch_valid == 'invalid' }}
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ github.event.pull_request.number }};
            const branch_name = '${{ github.head_ref }}';
            const message = `‚ùå To automate versioning, only branches starting with 'fix/' or 'dev' are allowed to open PRs to 'main'.\nYour branch: ${branch_name}. Please rename your branch.\nMoreover, if you intended to open a PR to 'main', please ensure **you are a member of the CrackingShells organization.**`;
            await github.rest.issues.createComment({
              issue_number: pr_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
            core.setFailed('Invalid branch for PR to main.');

      - name: Generate GitHub App token for workflow
        id: generate-workflow-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.HATCH_WORKFLOW_APP_ID }}
          private_key: ${{ secrets.HATCH_WORKFLOW_APP_PRIVATE_KEY }}

      - name: Check org membership for dev branch and fail if not member
        if: ${{ steps.check-branch.outputs.branch_valid == 'dev' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-workflow-token.outputs.token }}
          script: |
            const org = 'CrackingShells';
            const author = process.env.AUTHOR || '${{ github.event.pull_request.user.login }}';
            const pr_number = ${{ github.event.pull_request.number }};
            const branch_name = '${{ github.head_ref }}';
            try {
              const res = await github.rest.orgs.checkMembershipForUser({ org, username: author });
              if (res.status !== 204) {
                const message = `‚ö†Ô∏è Only members of the CrackingShells organization can open PRs from 'dev' to 'main'.\nPlease, rebase your branch on \`dev\` and open a PR to \`dev\` instead.`;
                await github.rest.issues.createComment({
                  issue_number: pr_number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: message
                });
                core.setFailed('PR author is not a member of the organization.');
              }
            } catch (e) {
              const message = `‚ùå Unexpected error happened while checking organization membership of ${author}: ${e.message}`;
              await github.rest.issues.createComment({
                issue_number: pr_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
              core.setFailed('PR author is not a member of the organization.');
            }
